global
    # Optimize for low latency
    maxconn 1000
    tune.bufsize 8192
    
    # Disable logging completely for performance
    log /dev/null local0
    
    # Single thread
    nbthread 1
    
    # Low latency network tuning
    tune.rcvbuf.client 8192
    tune.rcvbuf.server 8192
    tune.sndbuf.client 8192
    tune.sndbuf.server 8192
    
    # Disable idle connections quickly
    tune.idle-pool.shared off

defaults
    mode http
    
    # Aggressive timeouts for low latency
    timeout connect 1s
    timeout client 5s
    timeout server 5s
    timeout http-keep-alive 500ms
    timeout http-request 2s
    timeout queue 1s
    
    # Disable all logging
    no log
    
    # No compression - adds latency
    # No stats - saves CPU

# Rate limiting table
backend rate_limit_table
    stick-table type ip size 10k expire 5s store http_req_rate(10s)

frontend web_frontend
    bind *:80 defer-accept
    
    # Track request rates per IP
    http-request track-sc0 src table rate_limit_table
    
    # Minimal processing - direct path routing
    acl is_payment path /payments
    acl is_summary path /payments-summary
    
    # Rate limiting rules - correct syntax
    # Payments: 10 requests per 10 seconds
    http-request deny deny_status 200 if is_payment { sc_http_req_rate(0) gt 1000 }
    # http-request deny deny_status 429 if is_payment { sc_http_req_rate(0) gt 100 }
    
    # Summary: 30 requests per 10 seconds  
    # http-request deny deny_status 429 if is_summary { sc_http_req_rate(0) gt 300 }
    
    # General rate limit for other paths: 5 requests per 10 seconds
    # http-request deny deny_status 429 if { sc_http_req_rate(0) gt 5 }
    
    use_backend payments_backend if is_payment METH_POST
    use_backend summary_backend if is_summary METH_GET
    default_backend not_found_backend

backend payments_backend
    # First available server for lowest latency
    balance roundrobin
    # balance first
    
    # Keep connections alive but short
    option http-keep-alive
    http-reuse aggressive
    
    # No health checks on payment backend - saves latency
    server app1 app1:8080 maxconn 500
    server app2 app2:8080 maxconn 500
    # server app2 app2:8080 maxconn 500 backup

backend summary_backend
    balance roundrobin
    option http-keep-alive
    
    # Light health check for summary endpoint
    option httpchk GET /payments-summary
    http-check expect status 200
    
    server app1 app1:8080 check inter 5s fall 2 rise 1
    server app2 app2:8080 check inter 5s fall 2 rise 1

backend not_found_backend
    http-request return status 404
